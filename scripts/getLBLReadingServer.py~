#!/usr/bin/env python

from multi_robot_localisation.srv import *
from multi_robot_localisation.msg import *
import rospy
from geometry_msgs.msg import Pose, Point, Quaternion, Twist
import numpy;
import random;
import math;
import matplotlib.pyplot as plt

points = numpy.matrix([ [1.,1.,-10.], [1000., 5., -20.]]);
xypoints = points[:, 0:2];
xydistances = numpy.zeros((len(points), 1));
seaDepth = 30;

def euclideanDistance(a, b):
    return numpy.linalg.norm(a - b);

def getLBLDistance(target):
for i in range(len(xydistances)):
    lblDistance = euclideanDistance(points[i], target);
    depthDifference = points[i, 2] - target[2];
    xydistances[i] = math.sqrt(lblDistance ** 2 - depthDifference ** 2) + random.gauss(0, 0.1);


def handleGetLBLReading(req):
    print req
    target = numpy.array([req.x, req.y, req.z]);
    dist = getLBLDistance(target)
    return getLBLReadingResponse(Distance(2.3))

def getLBLReadingServer():
    rospy.init_node('get_LBL_reading_server')
    s = rospy.Service('get_LBL_reading', getLBLReading, handleGetLBLReading)
    print "Ready to simulate LBL readings"
    rospy.spin()




    
def probSurfaceMultiPath(robot_z):
    #sigmoid centred at -2 meaning in a depth of -2 metres, the probability of multipath is 0.5
    return 1. / (1. + math.exp(-robot_z-2))

def probBottomMultiPath(robot_z):
    distance = seaDepth + robot_z;    
    return 1. / (1. + math.exp(distance-2))

def getPositionFromLBL(xypoints, xydistances):
    r = numpy.zeros((len(xypoints), 1));
        
    for i in range(len(r)):
        r[i] = 1./2*(xypoints[i] * xypoints[i].T - xydistances[i] ** 2)
        
    pseudoInverse = numpy.linalg.pinv(xypoints);
   
    onevector = numpy.ones((len(xypoints), 1))
    
    u = numpy.squeeze(numpy.asarray(pseudoInverse * onevector));
    v = numpy.squeeze(numpy.asarray(pseudoInverse * r));
    
    uudot = numpy.dot(u,u)
    uvdot = numpy.dot(u,v)
    vvdot = numpy.dot(v,v)
    
    lambdaSolutions = numpy.roots([uudot, 2 * (uvdot - 1), vvdot])
    
    xSolutions = numpy.zeros((len(lambdaSolutions), 2))
    for i in range(len(lambdaSolutions)):
        xSolutions[i] = u * lambdaSolutions[i] + v
    return xSolutions


if __name__ == "__main__":
    getLBLReadingServer()

